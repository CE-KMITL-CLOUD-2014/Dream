<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
 
http://www.springframework.org/schema/security
 
 
http://www.springframework.org/schema/security/spring-security-3.2.xsd
 
 
http://www.springframework.org/schema/beans
 
 
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<!-- Rest authentication entry point configuration -->
	<http use-expressions="true" entry-point-ref="restAuthenticationEntryPoint"
		auto-config="true">
		<intercept-url pattern="/user/update" />
		<sec:form-login authentication-success-handler-ref="mySuccessHandler"
			authentication-failure-handler-ref="myFailureHandler" />
		<sec:logout delete-cookies="JSESSIONID"
			success-handler-ref="httpLogoutSuccessHandler" />
		<sec:custom-filter ref="corsAwareAuthenticationFilter"
			before="LOGOUT_FILTER" />

		<remember-me data-source-ref="dataSource"
			token-validity-seconds="86400" />
		<session-management>
			<concurrency-control max-sessions="1" />
		</session-management>
	</http>

	<!-- Bean CORS filter logout -->
	<beans:bean id="corsAwareAuthenticationFilter" class="com.dream.controller.CORSFilter" />
	<beans:bean id="httpLogoutSuccessHandler" class="com.dream.security.HttpLogoutSuccessHandler" />

	<!-- Connect the custom authentication success handler -->
	<beans:bean id="mySuccessHandler"
		class="com.dream.security.RestAuthenticationSuccessHandler" />
	<!-- Using default failure handler -->
	<beans:bean id="myFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" />

	<!-- Persistent Remember Me Service -->
	<beans:bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
		<beans:property name="key" value="myAppKey" />
		<beans:property name="tokenRepository" ref="jdbcTokenRepository" />
		<beans:property name="userDetailsService" ref="myUserDetailsService" />
	</beans:bean>

	<!-- Uses a database table to maintain a set of persistent login data -->
	<beans:bean id="jdbcTokenRepository"
		class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
		<beans:property name="createTableOnStartup" value="false" />
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<!-- Authentication manager -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailsService">
			<password-encoder hash="bcrypt" />
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="myUserDetailsService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName"
			value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
		<beans:property name="url"
			value="jdbc:sqlserver://rnhyrbrn6o.database.windows.net:1433;database=dream_db;user=dreamService@rnhyrbrn6o;password=CEkmitl702;encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;" />
	</beans:bean>

	<!-- Enable the annotations for defining the secure role -->
	<global-method-security secured-annotations="enabled" />

</beans:beans>